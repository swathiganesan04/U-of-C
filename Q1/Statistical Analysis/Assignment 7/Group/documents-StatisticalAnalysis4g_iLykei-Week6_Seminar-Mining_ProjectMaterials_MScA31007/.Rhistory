# numbers of random numbers
for (i in 2:noOfRandomNums){
# Follow the linear congruential method
randomNums[i] <- ((randomNums[i - 1] * a) +
c) %% m
}
return (randomNums*0.1)
}
X <-  5
# Modulus parameter
m <- 7
# Multiplier term
a <- 3
# Increment term
c <- 3
# Number of Random numbers
# to be generated
noOfRandomNums <- 10
# To store random numbers
randomNums <- list(integer(noOfRandomNums))
# Function Call
result <- linearCongruentialMethod(X, m, a, c,
randomNums[[1]],noOfRandomNums)
hist(result)
print(result)
linearCongruentialMethod <- function(X, m, a, c,
randomNums,
noOfRandomNums) {
# Initialize the seed state
randomNums[1] <- X
# Traverse to generate required
# numbers of random numbers
for (i in 2:noOfRandomNums){
# Follow the linear congruential method
randomNums[i] <- ((randomNums[i - 1] * a) +
c) %% m
}
return (randomNums*0.1)
}
X <-  5
# Modulus parameter
m <- 7
# Multiplier term
a <- 3
# Increment term
c <- 3
# Number of Random numbers
# to be generated
noOfRandomNums <- 10
# To store random numbers
randomNums <- list(integer(noOfRandomNums))
# Function Call
result <- linearCongruentialMethod(X, m, a, c,
randomNums[[1]],noOfRandomNums)
hist(result)
print(result)
res<-data.frame(pseudoSample=result,trueSample=result)
dataPath <- "/Users/swathiganesan/Desktop/Q1/Statistical Analysis/Assignment 3/Group/"
saveRDS(res,paste(dataPath,'result.rds',sep='/'))
# Function to return the Nambiar
nambiarNumber <- function(input, i) {
# If there is no digit to choose
if (i >= nchar(input)) {
return ("")
}
# Choose the first digit
firstDigit <- as.numeric(substr(input, i+1, i+1))
# Chosen digit's parity
digitParity <- firstDigit %% 2
# To store the sum of the consecutive
# digits starting from the chosen digit
sumDigits <- 0
# While there are digits to choose
while (i < nchar(input)){
# Update the sum
sumDigits <- (sumDigits + as.numeric(substr(input, i+1, i+1)))
sumParity <- (sumDigits %% 2)
# If the parity differs
if (digitParity != sumParity){
break}
i <- i + 1
}
# Return the current sum concatenated with the
# Nambiar number for the rest of the String
return (paste(c(sumDigits, nambiarNumber(input, i + 1)), collapse = ""))
}
# Program to convert decimal number into binary number using recursive function
convert_to_binary <- function(n) {
bin <- ''
if(n > 1) {
bin <- convert_to_binary(as.integer(n/2))
}
bin <- paste0(bin, n %% 2)
return(as.numeric(bin))
}
# Driver code
j<-0
result<-list()
while (j<1000){
input <- sample(100: 999,1)[1][1]
nam_num <- nambiarNumber(input, 0)
result <- append(result, (as.numeric(nam_num)+100)/1000
)
#convert_to_binary(as.numeric(nam_num))
j<-j+1
}
result_pseudo <- unlist(result, recursive = FALSE)
hist(result_pseudo)
##################################################
linearCongruentialMethod <- function(X, m, a, c,
randomNums,
noOfRandomNums) {
# Initialize the seed state
randomNums[1] <- X
# Traverse to generate required
# numbers of random numbers
for (i in 2:noOfRandomNums){
# Follow the linear congruential method
randomNums[i] <- ((randomNums[i - 1] * a) +
c) %% m
}
return (randomNums*0.1)
}
X <-  5
# Modulus parameter
m <- 7
# Multiplier term
a <- 3
# Increment term
c <- 3
# Number of Random numbers
# to be generated
noOfRandomNums <- 1000
# To store random numbers
randomNums <- list(integer(noOfRandomNums))
# Function Call
result_true <- linearCongruentialMethod(X, m, a, c,
randomNums[[1]],noOfRandomNums)
hist(result_true)
#######################################################3
res<-data.frame(pseudoSample=result_pseudo,trueSample=result_true)
dataPath <- "/Users/swathiganesan/Desktop/Q1/Statistical Analysis/Assignment 3/Group/"
saveRDS(res,paste(dataPath,'result.rds',sep='/'))
hist(result_pseudo)
# Function to return the Nambiar
nambiarNumber <- function(input, i) {
# If there is no digit to choose
if (i >= nchar(input)) {
return ("")
}
# Choose the first digit
firstDigit <- as.numeric(substr(input, i+1, i+1))
# Chosen digit's parity
digitParity <- firstDigit %% 2
# To store the sum of the consecutive
# digits starting from the chosen digit
sumDigits <- 0
# While there are digits to choose
while (i < nchar(input)){
# Update the sum
sumDigits <- (sumDigits + as.numeric(substr(input, i+1, i+1)))
sumParity <- (sumDigits %% 2)
# If the parity differs
if (digitParity != sumParity){
break}
i <- i + 1
}
# Return the current sum concatenated with the
# Nambiar number for the rest of the String
return (paste(c(sumDigits, nambiarNumber(input, i + 1)), collapse = ""))
}
# Program to convert decimal number into binary number using recursive function
convert_to_binary <- function(n) {
bin <- ''
if(n > 1) {
bin <- convert_to_binary(as.integer(n/2))
}
bin <- paste0(bin, n %% 2)
return(as.numeric(bin))
}
# Driver code
j<-0
result<-list()
while (j<1000){
input <- sample(100: 999,1)[1][1]
nam_num <- nambiarNumber(input, 0)
result <- append(result, (as.numeric(nam_num)+100)/1000
)
#convert_to_binary(as.numeric(nam_num))
j<-j+1
}
result_pseudo <- unlist(result, recursive = FALSE)
hist(result_pseudo)
##################################################
linearCongruentialMethod <- function(X, m, a, c,
randomNums,
noOfRandomNums) {
# Initialize the seed state
randomNums[1] <- X
# Traverse to generate required
# numbers of random numbers
for (i in 2:noOfRandomNums){
# Follow the linear congruential method
randomNums[i] <- ((randomNums[i - 1] * a) +
c) %% m
}
return (randomNums*0.1)
}
X <-  5
# Modulus parameter
m <- 7
# Multiplier term
a <- 3
# Increment term
c <- 3
# Number of Random numbers
# to be generated
noOfRandomNums <- 1000
# To store random numbers
randomNums <- list(integer(noOfRandomNums))
# Function Call
result_true <- linearCongruentialMethod(X, m, a, c,
randomNums[[1]],noOfRandomNums)
hist(result_true)
#######################################################3
res<-data.frame(pseudoSample=result_pseudo,trueSample=result_true)
dataPath <- "/Users/swathiganesan/Desktop/Q1/Statistical Analysis/Assignment 3/Group/"
saveRDS(res,paste(dataPath,'result.rds',sep='/'))
dataPath <- "/Users/swathiganesan/Desktop/Q1/Statistical Analysis/Assignment 4/Individual/"
dat <- read.table(paste(dataPath,'Week4_Test_Sample.csv',sep = '/'), header=TRUE)
dataPath <- "/Users/swathiganesan/Desktop/Q1/Statistical Analysis/Assignment 4/Individual/"
dat <- read.table(paste(dataPath,'Week4_Test_Sample.csv',sep = '/'), header=TRUE)
print(dat)
hist(dat)
hist(dat$x)
hist(dat$x)
dat$x
dat$X
hist(dat$X)
hist(dat$Y)
plot(dat$X,dat$Y)
Estimated.LinearModel <- lm(Y ~ X,data=dat)
names(Estimated.LinearModel)
Estimated.LinearModel.coefficients
Estimated.LinearModel$coefficients
Estimated.LinearModel$residuals
Estimated.LinearModel$fitted.values
plot(Estimated.LinearModel$residuals)
dataPath <- "/Users/swathiganesan/Desktop/Q1/Statistical Analysis/Assignment 4/Individual/"
dat <- read.table(paste(dataPath,'Week4_Test_Sample.csv',sep = '/'), header=TRUE)
print(dat)
plot(dat$X,dat$Y)
Estimated.LinearModel <- lm(Y ~ X,data=dat)
names(Estimated.LinearModel)
Estimated.LinearModel$coefficients
plot(Estimated.LinearModel$residuals)
Estimated.LinearModel$fitted.values
Estimated.Residuals <- lm(Y ~ X,data=dat)
Estimated.Residuals <- residuals(Estimated.Residuals)
# Isolate positive values
pos.values <- Estimated.Residuals > 0
# Returns values that are TRUE (positive values)
true.values <- Estimated.Residuals[Estimated.Residuals > 0]
# Returns mean of values that are TRUE
mean.values <- mean(Estimated.Residuals[Estimated.Residuals > 0])
# Return value based on logic
unscrambled.selection.sequence <- ifelse(Estimated.Residuals > 0, 1, 0)
unscrambled.selection.sequence
# Save File
res <- list(Unscrambled.Selection.Sequence =  unscrambled.selection.sequence)
write.table(res, file = paste(datapath,'result.csv',sep = '/'), row.names = F)
dataPath <- "/Users/swathiganesan/Desktop/Q1/Statistical Analysis/Assignment 4/Individual/"
write.table(res, file = paste(datapath,'result.csv',sep = '/'), row.names = F)
write.table(res, file = paste(dataPath,'result.csv',sep = '/'), row.names = F)
# Assignment 7
dataPath <- "/Users/swathiganesan/Desktop/Q1/Statistical Analysis/Assignment 7/Individual/Week7_Test_Sample"
# SECTION 1.1 - READING THE DATA
test_dat <- read.table(paste(dataPath,'Week7_Test_Sample.csv',sep = '/'), header=TRUE)
# Assignment 7
dataPath <- "/Users/swathiganesan/Desktop/Q1/Statistical Analysis/Assignment 7/Individual/"
# SECTION 1.1 - READING THE DATA
test_dat <- read.table(paste(dataPath,'Week7_Test_Sample.csv',sep = '/'), header=TRUE)
head(test_dat)
# SECTION 1.2 - Fit linear models using: no inputs, only Input1, only Input2, both Input1 and Input2.
fit.1<-lm(Output~1,data=test_dat) #output y
fit.1.2<-lm(Output~1+Input1,data=test_dat) #first predictor values
fit.1.3<-lm(Output~1+Input2,data=test_dat) #second predictor values
fit.1.2.3<-lm(Output~.,data=test_dat)
# SECTION 2.1 - OUPTUTS OF ANOVA()
anova(fit.1.2)$"Sum Sq" #= 376.1526 177.6054
anova(fit.1.2)$"Pr(>F)"[1] #= 4.619545e-125
anova(fit.1.3)$"Sum Sq" #= 1.73732 552.02067
c(anova(fit.1,fit.1.2.3)$F[2],summary(fit.1.2.3)$fstatistic[1]) #= 526.301
anova(fit.1.2.3)$"Pr(>F)"[1] #= 8.165178e-125
# SECTION 2.1 - OUPTUTS OF ANOVA()
anova(fit.1.2)$"Sum Sq" #= 376.1526 177.6054
anova(fit.1.3)$"Sum Sq" #= 1.73732 552.02067
anova(fit.1.2)$"Pr(>F)"[1] #= 4.619545e-125
c(anova(fit.1,fit.1.2.3)$F[2],summary(fit.1.2.3)$fstatistic[1]) #= 526.301
anova(fit.1.2)$"Pr(>F)"[1] #= 4.619545e-125
c(anova(fit.1,fit.1.2.3)$F[2],summary(fit.1.2.3)$fstatistic[1]) #= 526.301
summary(fit.1.2.3)
anova(fit.1.2)$"Pr(>F)"[1] #= 4.619545e-125
# SECTION 2.1 - OUPTUTS OF ANOVA()
anova(fit.1.2)$"Sum Sq" #= 376.1526 177.6054
c(anova(fit.1,fit.1.2.3)$F[2],summary(fit.1.2.3)$fstatistic[1]) #= 526.301
anova(fit.1,fit.1.2.3)
anova(fit.1,fit.1.2.3)
anova(fit.1.2.3)$"Pr(>F)"[1] #= 8.165178e-125
anova(fit.1,fit.1.2.3)$"Pr(>F)"[1]
anova(fit.1,fit.1.2.3)$"Pr(>F)"
anova(fit.1.2.3)$"Pr(>F)"[1] #= 8.165178e-125
anova(fit.1.2.3)$"Pr(>F)"[1]
c(anova(fit.1,fit.1.2.3)$F[2],summary(fit.1.2.3))
c(anova(fit.1,fit.1.2.3)$F[2],summary(fit.1.2.3)$fstatistic[1]) #= 526.301
c(anova(fit.1,fit.1.2.3)$F[2],summary(fit.1.2.3)$fstatistic[1]) #= 526.301
anova(fit.1,fit.1.2.3)
summary(fit.1.2.3)
anova(fit.1.2.3)$"Pr(>F)"[1]
# SECTION 2.1 - OUPTUTS OF ANOVA()
anova(fit.1.2)$"Sum Sq" #= 376.1526 177.6054
anova(fit.1.2)$"Pr(>F)"[1] #= 4.619545e-125
anova(fit.1.3)$"Pr(>F)"[1]
anova(fit.1.2)$"Pr(>F)"[1] #= 4.619545e-125
anova(fit.1,fit.1.2.3)$"Pr(>F)"[1]
anova(fit.1.2.3)$"Pr(>F)"[1]
anova(fit.1,fit.1.2.3)
anova(fit.1.3)
anova(fit.1.2)
anova(fit.1,fit.1.2.3)
anova(fit.1.3)
dataPath <- "/Users/swathiganesan/Desktop/Q1/Statistical Analysis/Assignment 8/Individual/"
coagulation <- read.table(paste(dataPath,'Week8_Test_Sample.csv',sep = '/'), header=TRUE)
test_dat <- read.table(paste(dataPath,'Week8_Test_Sample.csv',sep = '/'), header=TRUE)
View(test_dat)
#Output Values
coagulation$Output
#Predictor Values
coagulation$Treatment
summaryByGroup<-aggregate(Output~Treatment,data=coagulation,FUN=summary)
means<-cbind(Means=summaryByGroup$Output[,4],Sizes=aggregate(Output~Treatment,data=coagulation,FUN=length)$Output)
rownames(means)<-as.character(summaryByGroup$Treatment)
means
coag<-coagulation
coag$x1<-coag$Treatment=="B"
coag$x2<-coag$Treatment=="C"
coag
coag.model<-lm(Output~Treatment,data=coagulation)
coag.model.full<-lm(Output~x1+x2, data=coag)
coag.model.null<-lm(Output~1,data=coag)
anova(coag.model.null,coag.model.full)
summary(coag.model)
anova(coag.model)
grand.mean<-mean(coagulation$Output)
create.vector.of.means<-function(my.group.data) {
rep(my.group.data[1],my.group.data[2])
}
group.mean<-unlist(apply(means,1,create.vector.of.means))
grand.mean
group.mean
SST<-sum((coagulation$Output-grand.mean)^2)
#1) Within group sum of squares
SSE<-sum((coagulation$Output-group.mean)^2)
#2) Between groups sum of squares
SSM<-sum((group.mean-grand.mean)^2)
c(SST=SST,SSE=SSE,SSM=SSM)
fc1<-anova(coag.model)
anova(coag.model.null,coag.model.full)
model.matrix(coag.model)
coag.altmodel<-lm(Output~Treatment-1,data=coagulation)
fc<-anova(coag.altmodel)
#3) Sum of squares of predictor for model testing: "all group mean values are equal to 0"
fc$`Sum Sq`
#4) #3) Sum of squares of residuals for model testing: "all group mean values are equal to 0"
fc1$`Sum Sq`
SSE
SSM
model.matrix(coag.altmodel)
sum((group.mean-grand.mean)^2)
sum(group.mean^2)
(sum((group.mean-grand.mean)^2)/2)/(sum((coagulation$Output-group.mean)^2)/(length(coagulation$Output)-3))
(sum(group.mean^2)/3)/(sum((coagulation$Output-group.mean)^2)/(length(coagulation$Output)-3))
coag.model<-lm(Output~Treatment,data=test_dat)
coag.altmodel<-lm(Output~Treatment-1,data=test_dat)
modelSummary<-summary(coag.model)
modelANOVA<-anova(coag.model)
altmodelSummary<-summary(coag.altmodel)
altmodelANOVA<-anova(coag.altmodel)
grand.mean<-mean(test_dat$Output)
create.vector.of.means<-function(my.group.data) {
rep(my.group.data[1],my.group.data[2])
}
group.mean<-unlist(apply(means,1,create.vector.of.means))
grand.mean
group.mean
SST<-sum((test_dat$Output-grand.mean)^2)
#1) Within group sum of squares
SSE<-sum((test_dat$Output-group.mean)^2)
SSE
#2) Between groups sum of squares
SSM<-sum((group.mean-grand.mean)^2)
SSM
c(SST=SST,SSE=SSE,SSM=SSM)
coag <- test_dat
coag$x1<-coag$Treatment=="A"
coag$x2<-coag$Treatment=="B"
coag$x3<-coag$Treatment=="C"
coag
coag.model.full<-lm(Output~x1+x2+x3, data=coag)
coag.model.null<-lm(Output~1,data=coag)
anova(coag.model.null,coag.model.full)
summary(coag.model)
anova(coag.model)
model.matrix(coag.model)
summary(coag.altmodel)
anova(coag.altmodel)
model.matrix(coag.altmodel)
#F-statistics
(sum((group.mean-grand.mean)^2)/3)/(sum((test_dat$Output-group.mean)^2)/(length(test_dat$Output)-4))
(sum(group.mean^2)/4)/(sum((test_dat$Output-group.mean)^2)/(length(test_dat$Output)-4))
SST<-sum((coagulation$Output-grand.mean)^2)
#1) Within group sum of squares
SSE<-sum((coagulation$Output-group.mean)^2)
#2) Between groups sum of squares
SSM<-sum((group.mean-grand.mean)^2)
c(SST=SST,SSE=SSE,SSM=SSM)
#1) Within group sum of squares
SSE<-sum((test_dat$Output-group.mean)^2)
SSE
#2) Between groups sum of squares
SSM<-sum((group.mean-grand.mean)^2)
SSM
SST<-sum((coagulation$Output-grand.mean)^2)
#1) Within group sum of squares
SSE<-sum((coagulation$Output-group.mean)^2)
#2) Between groups sum of squares
SSM<-sum((group.mean-grand.mean)^2)
c(SST=SST,SSE=SSE,SSM=SSM)
fc1<-anova(coag.model)
anova(coag.model.null,coag.model.full)
model.matrix(coag.model)
coag.altmodel<-lm(Output~Treatment-1,data=coagulation)
fc<-anova(coag.altmodel)
#3) Sum of squares of predictor for model testing: "all group mean values are equal to 0"
fc$`Sum Sq`
#4) #3) Sum of squares of residuals for model testing: "all group mean values are equal to 0"
fc1$`Sum Sq`
#3) Sum of squares of predictor for model testing: "all group mean values are equal to 0"
fc$`Sum Sq`
fc
fc1
#3) Sum of squares of predictor for model testing: "all group mean values are equal to 0"
fc$`Sum Sq`
model.matrix(coag.altmodel)
#3) Sum of squares of predictor for model testing: "all group mean values are equal to 0"
fc$`Sum Sq`
fc1
fc
# SECTION 2.1 - OUPTUTS OF ANOVA()
anova(fit.1.2)$"Sum Sq" #= 305.8921  202.3953
anova(fit.1.2)$"Pr(>F)"[1] #= 4.619545e-125
anova(fit.1.3)$"Sum Sq" #= 1.73732 552.02067
c(anova(fit.1,fit.1.2.3)$F[2],summary(fit.1.2.3)$fstatistic[1]) #= 526.301
anova(fit.1.2.3)$"Pr(>F)"[1]
c(anova(fit.1,fit.1.2.3)$F[2],summary(fit.1.2.3))
anova(fit.1.2.3)$"Pr(>F)"[1]
setwd("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007")
source("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007/Mining_client.R", echo=TRUE)
# This simple code is given as an example only. You can tune "eventRate_barrier" parameter for the
# workshop data, but it won't give you the best result on the test data.
# We will send an alarm signal if estimated event rate exceeds eventRate_barrier.
new_event_handler <- function() {
now <- Sys.time()
if(incoming_signals_counter < 0.5){
initial_timestamp <<- now
}
# time in minutes from the start of the stream
t <- as.double(difftime(now, initial_timestamp, unit='min'))
# log event if necessary
##message("EVENT at ", now)
# update inc_signals dataframe (append last value):
incoming_signals_counter <<- incoming_signals_counter + 1
inc_signals[incoming_signals_counter,] <<- list(now)
eventMoments[incoming_signals_counter] <<- t
send_signal <- FALSE
if(t > W)
{
tSet <- c(t - W, t) #current time interval (t_i-1,t_i)
X <- eventMoments[!is.na(eventMoments)]
eventsBeforeMoments <- findInterval(tSet, X)
intensity <- eventsBeforeMoments[2] - eventsBeforeMoments[1] #events number between "t-w" and "t"
intensity <- intensity/W # events per minute
send_signal <- (intensity > eventRate_barrier) & (outgoing_signals_counter <= 0)
}
if (send_signal) {
# update out_signals dataframe (append last value):
outgoing_signals_counter <<- outgoing_signals_counter + 1
out_signals[outgoing_signals_counter,] <<- list(now)
}
Draw()
return( send_signal )
}
source("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007/Mining_client.R", echo=TRUE)
source("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007/Mining_client.R", echo=TRUE)
setwd("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007")
source("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007/Mining_connection.R", echo=TRUE)
source("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007/Mining_client.R", echo=TRUE)
source("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007/Mining_connection.R", echo=TRUE)
source("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007/Mining_client.R", echo=TRUE)
source("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007/Mining_client.R", echo=TRUE)
source("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007/Mining_client.R", echo=TRUE)
source("~/Downloads/documents-StatisticalAnalysis4g_iLykei-Week6_Seminar-Mining_ProjectMaterials_MScA31007/Mining_client.R", echo=TRUE)
